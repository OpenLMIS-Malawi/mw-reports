package mw.gov.health.lmis.reports.web;

import mw.gov.health.lmis.reports.dto.RequisitionReportDto;
import mw.gov.health.lmis.reports.dto.external.RequisitionDto;
import mw.gov.health.lmis.reports.dto.external.RequisitionLineItemDto;
import mw.gov.health.lmis.reports.dto.external.RequisitionStatusDto;
import mw.gov.health.lmis.reports.dto.external.StatusChangeDto;
import mw.gov.health.lmis.reports.dto.external.UserDto;
import mw.gov.health.lmis.reports.i18n.MessageKeys;
import mw.gov.health.lmis.reports.i18n.MessageService;
import mw.gov.health.lmis.reports.service.referencedata.UserReferenceDataService;
import mw.gov.health.lmis.utils.Message;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;

@Component
public class RequisitionReportDtoBuilder {

  @Autowired
  private UserReferenceDataService userReferenceDataService;

  @Autowired
  private MessageService messageService;
  
  /**
   * Create a {@link RequisitionReportDto} based on a given {@link RequisitionDto}
   *
   * @param requisition a single {@link RequisitionDto} to be converted to report dto.
   * @return a single {@link RequisitionReportDto}
   */
  public RequisitionReportDto build(RequisitionDto requisition) {
    List<RequisitionLineItemDto> fullSupply =
        requisition.getNonSkippedFullSupplyRequisitionLineItems();
    List<RequisitionLineItemDto> nonFullSupply =
        requisition.getNonSkippedNonFullSupplyRequisitionLineItems();

    RequisitionReportDto reportDto = new RequisitionReportDto();
    reportDto.setRequisition(requisition);
    reportDto.setFullSupply(fullSupply);
    reportDto.setNonFullSupply(nonFullSupply);
    reportDto.setFullSupplyTotalCost(requisition.getFullSupplyTotalCost());
    reportDto.setNonFullSupplyTotalCost(requisition.getNonFullSupplyTotalCost());
    reportDto.setTotalCost(requisition.getTotalCost());
    reportDto.setChamFacility(requisition.isChamFacility());

    List<StatusChangeDto> statusChanges = requisition.getStatusHistory();
    if (statusChanges != null) {
      Optional<StatusChangeDto> initiatedEntry = statusChanges.stream()
          .filter(statusChange -> statusChange.getStatus() == RequisitionStatusDto.INITIATED)
          .findFirst();
      if (initiatedEntry.isPresent()) {
        reportDto.setInitiatedBy(getUser(initiatedEntry.get()));
        reportDto.setInitiatedDate(initiatedEntry.get().getCreatedDate());
      }

      Optional<StatusChangeDto> submittedEntry = statusChanges.stream()
          .filter(statusChange -> statusChange.getStatus() == RequisitionStatusDto.SUBMITTED)
          .findFirst();
      if (submittedEntry.isPresent()) {
        reportDto.setSubmittedBy(getUser(submittedEntry.get()));
        reportDto.setSubmittedDate(submittedEntry.get().getCreatedDate());
      }

      Optional<StatusChangeDto> authorizedEntry = statusChanges.stream()
          .filter(statusChange -> statusChange.getStatus() == RequisitionStatusDto.AUTHORIZED)
          .findFirst();
      if (authorizedEntry.isPresent()) {
        reportDto.setAuthorizedBy(getUser(authorizedEntry.get()));
        reportDto.setAuthorizedDate(authorizedEntry.get().getCreatedDate());
      }
    }

    return reportDto;
  }

  private UserDto getUser(StatusChangeDto statusChange) {
    UserDto user;

    if (statusChange.getAuthorId() == null) {
      /*
       * This will happen for Javers entries that were generated by the system
       * in the AuditLogInitializer class at startup. This concerns primarily
       * pre-made requisitions, either from demo-data or inserted to the database
       * through other means. This is a solution to handle those entries and display
       * the user as 'SYSTEM' in the report. If one wishes more detailed information for
       * their data, they will have to consider correctly populating Javers tables in
       * their ETL process.
      */
      Message.LocalizedMessage localizedMessage = messageService.localize(
          new Message(MessageKeys.STATUS_CHANGE_USER_SYSTEM));
      String system = localizedMessage.asMessage();

      user = new UserDto();
      user.setUsername(system);
      user.setFirstName(system);
    } else {
      user = userReferenceDataService.findOne(statusChange.getAuthorId());
    }

    return user;
  }
}
